-- Single-line comment
(*
   Multi-line comment
*)

-- Import
import math;
import math::{add, PI};

-- Public function
export func add(a: int, b: int) -> int {
    return a + b;
}

-- Function with a default parameter
func greet(name: string = "Guest") -> unit {
    print("Hello, " + name);
}

-- Compute the area of a circle
func compute_area(radius: float) -> float {
    return PI * radius * radius;
}

-- Function demonstrating mutable borrowing to update a message
func update_message(s: &mut string) -> unit {
    s = uppercase(s);
}

-- Takes ownership of the passed string
func takes_ownership(s: string) -> unit {
    print("Took ownership: " + s);
}

-- Borrows a string immutably to print its length
func print_length(s: &string) -> unit {
    print("Length: " + to_string(size(s)));
}

-- Creates and returns a new message (transferring ownership)
func create_message() -> string {
    return "Created message";
}

-- Main entry point
func main() -> unit {
    -- Using default parameters and explicit parameters
    greet();               -- Prints "Hello, Guest"
    greet("Alice");        -- Prints "Hello, Alice"
    
    let x: int = 1;
    let y: int = 2;
    
    if x == y {
    	print("They are the same");
    }

    -- Using the public add function
    let sum: int = add(5, 7);
    print("Sum: " + to_string(sum));

    -- Compute area using a float
    let area: float = compute_area(3.0);
    print("Area: " + to_string(area));

    -- Ownership example
    let msg: string = "Hello";
    takes_ownership(msg);
    -- print(msg);  -- ERROR: `msg` was moved

    -- Immutable borrowing: `s` remains valid after borrowing
    let s: string = "immutable";
    print_length(&s);
    print("s: " + s);

    -- Mutable borrowing: update message in place
    let mut s2: string = "mutable";
    update_message(&mut s2);
    print("s2: " + s2);

    -- Returning ownership: caller now owns the returned message
    let message: string = create_message();
    print("message: " + message);

    -- Loop example using a range
    for i in 1..6 {
        print("Loop index: " + to_string(i));
    }
}
